" ==================  vim-plug  ================
if has('nvim')
    " automatic installation (for Neovim: ~/.local/share/nvim/site/autoload/plug.vim)
    if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
        silent !curl -flo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
                    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd vimenter * pluginstall --sync | source $myvimrc
    endif
    " Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
    call plug#begin('~/.local/share/nvim/plugged')
    " Make sure you use single quotes
else
    " automatic installation (for vim: ~/.vim/autoload/plug.vim)
    if empty(glob('~/.vim/autoload/plug.vim'))
        silent !curl -flo ~/.vim/autoload/plug.vim --create-dirs
                    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd vimenter * pluginstall --sync | source $myvimrc
    endif
    " Specify a directory for plugins (for vim: ~/.vim/plugged)
    call plug#begin('~/.vim/plugged')
    " Make sure you use single quotes
endif

" Prettier vim
" Plug 'flazz/vim-colorschemes'
Plug 'chriskempson/base16-vim'
Plug 'morhetz/gruvbox'
Plug 'w0ng/vim-hybrid'
Plug 'joshdick/onedark.vim'
Plug 'ayu-theme/ayu-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

" Language specific (syntax, completion, etc.)
Plug 'chrisbra/csv.vim'
" Plug 'python-mode/python-mode', { 'branch': 'develop' }
Plug 'Vimjas/vim-python-pep8-indent'
" Plug 'davidhalter/jedi-vim'
Plug 'sheerun/vim-polyglot'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    Plug 'numirias/semshi', { 'do': ':UpdateRemotePlugins' }
    Plug 'zchee/deoplete-jedi'
    Plug 'zchee/deoplete-clang'
    Plug 'machakann/vim-Verdin', { 'for': ['vim'] }
elseif v:version >= 800
    Plug 'maralla/completor.vim'
endif

" Convenient coding
Plug 'w0rp/ale'
Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'
Plug 'ervandew/supertab'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'machakann/vim-sandwich'
Plug 'easymotion/vim-easymotion'
Plug 'terryma/vim-multiple-cursors'
Plug 'scrooloose/nerdcommenter'
Plug 'Yggdroot/indentLine'
Plug 'jiangmiao/auto-pairs'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-repeat'
Plug 'terryma/vim-expand-region'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'kshenoy/vim-signature'
" Plug 'tpope/vim-sensible'
Plug 'junegunn/vim-easy-align'
Plug 'Shougo/echodoc.vim'
Plug 'michaeljsmith/vim-indent-object'
Plug 'junegunn/gv.vim'
" Plug 'yuttie/comfortable-motion.vim'
" Plug 'kien/rainbow_parentheses.vim'
Plug 'chrisbra/NrrwRgn'
Plug 'dyng/ctrlsf.vim'
if has('nvim')
    set inccommand=nosplit
    Plug 'lambdalisue/lista.nvim', { 'do': 'UpdateRemotePlugins' }
else
    Plug 'markonm/traces.vim'
    Plug 'lambdalisue/vim-rplugin'
    Plug 'lambdalisue/lista.nvim', { 'do': 'UpdateRemotePlugins' }
endif

" etc.
Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
"Plug 'metakirby5/codi.vim'
Plug 'mhinz/vim-startify'
Plug 'wellle/tmux-complete.vim'

" Initialize plugin system
call plug#end()


" ==================  vim setting ================
filetype plugin indent on             " Enable filetype plugins
set autoread                          " Set to auto read when a file is changed from the outside
syntax on

set nocompatible                      " do not compatible to original vi
set wrap
set nowrapscan                        " do not go back to the first of the line when it reaches at the end of the line
set nobackup                          " do not create backup file
set noswapfile                        " do not create swap file
set visualbell                        " visualbell on
set fencs=ucs-bom,utf-8,euc-kr.latin1 " hangle goes euc-kr, unicode goes unicode
set fileencoding=utf-8                " file saving encoding
set tenc=utf-8                        " terminal encoding
set backspace=eol,start,indent        " go to earlier line where the cursor is positioned at end of the line, start of the line and indent
set hidden                            " unsaved changes in buffer is hidden not quit
set history=1000                      " remember more commands and search history
set undofile                          " Maintain undo history between sessions
set undolevels=1000                   " use many muchos levels of undo
set undodir=~/.vim/undodir
set laststatus=2                      " status bar is always on
                                      " set statusline=\ %<%l:%v\ [%P]%=%a\ %h%m%r\ %F\
set linebreak
set colorcolumn=90                    " color column to limit coding length
set pastetoggle=<F2>                  " when in insert mode, press <F2> to go to
                                      " pasete mode, where you can paste mass data
                                      " that won't be autoindent

" Set unvisible characters
set list
set showbreak=↪\
set listchars=tab:»\ ,nbsp:␣,trail:·,extends:>,precedes:<

" visual autocomplete for command menu
set wildmenu
set wildmode=list:longest,full
" Setting up ignores
set wildignore+=*/tmp/*,*.so,*.pyc,*.png,*.jpg,*.gif,*.jpeg,*.ico,*.pdf
set wildignore+=*.wav,*.mp4,*.mp3
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
set wildignore+=*.swp,*~,._*
set wildignore+=_pycache_,.DS_Store,.vscode,.localized
" Resize panes whenever containing window resized.
autocmd VimResized * wincmd =

" When scrolling, keep cursor 5 lines away from screen border
set scrolloff=5

" Color scheme

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
" if (empty($TMUX))
    if (has("nvim"))
        "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
        let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    endif
    "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
    "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
    " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
    if (has("termguicolors"))
        set termguicolors
    endif
" endif

set t_Co=256        " for ubuntu
syntax enable       " enable syntax processing
set background=dark " lihgt / dark
" if has('termguicolors')
    " set termguicolors
    " set t_8b=[48;2;%lu;%lu;%lum
    " set t_8f=[38;2;%lu;%lu;%lum
" endif
" colorscheme base16-default-dark
" colorscheme base16-eighties
" colorscheme gruvbox
" colorscheme hybrid
" colorscheme dracula
" colorscheme Tomorrow-Night-Eighties
colorscheme onedark
" let ayucolor="mirage"
" colorscheme ayu

" Spaces & Tabs
set tabstop=4       " number of visual spaces per TAB
set softtabstop=4   " number of spaces in tab when editing
set expandtab       " tabs are spaces
set shiftwidth=4    " auto indent 4
set cindent         " indent only for C language
set smartindent     " smart indentation
set copyindent      " copy the previous indentation on autoindenting
set autoindent      " always set autoindenting on

" UI Config
set ruler           " show line and col
set relativenumber  " show relative line numbers
set number          " show absolute line numbers where your cursor is
set numberwidth=2   " keep the line number gutter narrow"
set showcmd         " show command in bottom bar
set cursorline      " highlight current line
filetype indent on  " load filetype-specific index files
set showmatch       " highlight matching [{()}]
set title           " change the terminal's title
set lazyredraw      " redraw only when we need to
set noshowmode      " for echodoc to hide -- INSERT -- in command line

" Searching
set incsearch       " show search matches as you type
set hlsearch        " highlight mtches
set ignorecase      " ignore case when searching
set smartcase       " ignore case if search pattern is all lowercase,
                    " case-sensitive otherwise

" Folding
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
set foldmethod=indent   " fold based on indent level
nnoremap <space> za

" ==================  vim mapping and functions ================
" leader is now spacebar
map <space> <leader>

" remove trailing whitespaces on save
fun! StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd FileType c,cpp,java,javascript,html,ruby,python,pandoc
    \ autocmd BufWritePre <buffer> :call StripTrailingWhitespaces()

" To toggle showing the non-printable characters
noremap <F12> :set list!<CR>
inoremap <F12> <Esc>:set list!<CR>a

" Vim jump to the last position when reopening a file
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Turns off vim's crazy default regex characters
"nnoremap / /\v
"vnoremap / /\v

" do not exit from visual mode when shifting
" (gv : select the preivous area)
vnoremap < <gv
vnoremap > >gv

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" turn off search highlight
nmap <leader><space> :nohlsearch<CR>

" Buffer navigation
nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>
nnoremap <C-b> :enew<CR>
" conform changes (Yes, No, Cancel) instead of error
" set confirm
nnoremap <leader>bq :bp <BAR> bd #<CR>

" Tab navigations
nnoremap [t  :tabprevious<CR>
nnoremap ]t  :tabnext<CR>
function! OpenCurrentAsNewTab()
    let l:currentPos = getcurpos()
    tabedit %
    call setpos(".", l:currentPos)
endfunction
nnoremap <C-t> :call OpenCurrentAsNewTab()<CR>
nnoremap <leader>tq :tabclose<CR>

" Vim Split navigations
nmap <C-J> <C-W><C-J>
nmap <C-K> <C-W><C-K>
nmap <C-L> <C-W><C-L>
nmap <C-H> <C-W><C-H>
set splitbelow
set splitright

" Vim Split command remapping like tmux
nmap <C-W>h <C-W>s
nmap <C-W>x <C-W>q

" Sudo Save (:Wsudo command)
command! Wsudo w !sudo tee % > /dev/null

" <leader>cd : switch to the directory of the current buffer
nmap <leader>cd :cd %:p:h<CR>

" <leader>{y,x,p} : {yank,cut,paste} wrt the system clipboard
map <leader>y "+y
noremap <leader>x "+x
noremap <leader>p "+p

" <leader>df : diffthis
nnoremap <leader>df :diffthis<CR>

" I am too lazy to take my hands from shift
command! WQ wq
command! Wq wq
command! W w

" python break point implementation
func! s:SetBreakpoint()
    cal append('.', repeat(' ', strlen(matchstr(getline('.'), '^\s*'))) . 'import ipdb; ipdb.set_trace()')
endf
func! s:RemoveBreakpoint()
    exe 'silent! g/^\s*import\sipdb\;\?\n*\s*ipdb.set_trace()/d'
endf
func! s:ToggleBreakpoint()
    if getline('.')=~#'^\s*import\sipdb' | cal s:RemoveBreakpoint() | el | cal s:SetBreakpoint() | en
endf
nnoremap <leader>b :call <SID>ToggleBreakpoint()<CR>


" terminal remaping escaping insert mode
" tnoremap <Esc> <C-\><C-n>

" [Advanced] Replace a word under the curser and '.' to repeat 'n' to skip
let g:should_inject_replace_occurences = 0
function! MoveToNext()
    if g:should_inject_replace_occurences
        call feedkeys("n")
        call repeat#set("\<Plug>ReplaceOccurences")
    endif

    let g:should_inject_replace_occurences = 0
endfunction

augroup auto_move_to_next
    autocmd! InsertLeave * :call MoveToNext()
augroup END

nmap <silent> <Plug>ReplaceOccurences :call ReplaceOccurence()<CR>
nmap <silent> c* :let @/ = '\C\<'.expand('<cword>').'\>'<CR>
    \:set hlsearch<CR>:let g:should_inject_replace_occurences=1<CR>cgn
vmap <silent> c* :<C-U>
    \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
    \gvy:let @/ = substitute(
    \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR>:set hlsearch<CR>:let g:should_inject_replace_occurences=1<CR>
    \gV:call setreg('"', old_reg, old_regtype)<CR>cgn

function! ReplaceOccurence()
    " check if we are on top of an occurence
    let l:winview = winsaveview()
    let l:save_reg = getreg('"')
    let l:save_regmode = getregtype('"')
    let [l:lnum_cur, l:col_cur] = getpos(".")[1:2]
    normal! ygn
    let [l:lnum1, l:col1] = getpos("'[")[1:2]
    let [l:lnum2, l:col2] = getpos("']")[1:2]
    call setreg('"', l:save_reg, l:save_regmode)
    call winrestview(winview)

    " if we are on top of an occurence, replace it
    if l:lnum_cur >= l:lnum1 && l:lnum_cur <= l:lnum2 && l:col_cur >= l:col1 && l:col_cur <= l:col2
        exe "normal! cgn\<c-a>\<esc>"
    endif

    call feedkeys("n")
    call repeat#set("\<Plug>ReplaceOccurences")
endfunction
""======


" ==================  Plugin Setting  ================

" NERDtree------------------------------------
    nmap <leader>N :NERDTreeToggle<CR>
    let NERDTreeQuitOnOpen = 0
    let NERDTreeMinimalUI = 1
    let NERDTreeDirArrows = 1
    let g:WebDevIconsUnicodeDecorateFolderNodes = 1
    " automatically close nerdtree if it is the only left window
    " autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    " startup Options (do NOT show automatically)
    let g:nerdtree_tabs_open_on_console_startup = 0
    let g:nerdtree_tabs_open_on_gui_startup = 0
    " filter out some files, by extension
    let NERDTreeIgnore = ['\.pyc$', '\.class$', '\.o$']


" NERDcommenter-------------------------------
    " Add spaces after comment delimiters by default
    let g:NERDSpaceDelims = 1
    " Use compact syntax for prettified multi-line comments
    let g:NERDCompactSexyComs = 1
    " Align line-wise comment delimiters flush left instead of following code indentation
    let g:NERDDefaultAlign = 'left'
    " Set a language to use its alternate delimiters by default
    let g:NERDAltDelims_java = 1
    " Add your own custom formats or override the defaults
    let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
    " Allow commenting and inverting empty lines (useful when commenting a region)
    let g:NERDCommentEmptyLines = 1
    " Enable trimming of trailing whitespace when uncommenting
    let g:NERDTrimTrailingWhitespace = 1


" Airline-------------------------------------
    " let g:airline_theme = 'bubblegum'
    " enable tabline feature
    let g:airline#extensions#tabline#enabled = 1
    " Display buffers (like tabs) in the tabline
    " if there is only one tab
    let g:airline#extensions#tabline#show_buffers = 1
    let g:airline_powerline_fonts = 0
    let g:airline#extensions#ale#enabled = 1


" ALE------------------------------------------
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    let g:ale_linters = {
                \ 'python': ['pylint']
                \}
    " show which linter is showing the message
    let g:ale_sign_error = '✘'
    let g:ale_sign_warning = '⚠'
    hi ALEErrorSign    gui=bold guifg=#e6645f ctermfg=167
    hi ALEWarningSign  gui=bold guifg=#b1b14d ctermfg=143
    " let g:ale_sign_error = '>>'
    " let g:ale_sign_warning = '--'
    " no highlight (underline) on detected errors/warnings
    let g:ale_set_highlights = 0


" Easymotion-----------------------------------
    let g:EasyMotion_do_mapping = 0 " Disable default mappings
    " Jump to anywhere you want with minimal keystrokes, with just one key binding
    " `s{char}{char}{label}`
    nmap s <Plug>(easymotion-overwin-f2)
    " Turn on case insensitive feature
    let g:EasyMotion_smartcase = 1
    " JK motions: Line motions
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)


" multiplecusors--------------------------------
    " Disable Deoplete when selecting multiple cursors starts
    function! Multiple_cursors_before()
        if exists('*deoplete#disable')
            exe 'call deoplete#disable()'
        elseif exists(':NeoCompleteLock') == 2
            exe 'NeoCompleteLock'
        endif
    endfunction

    " Enable Deoplete when selecting multiple cursors ends
    function! Multiple_cursors_after()
        if exists('*deoplete#enable')
            exe 'call deoplete#enable()'
        elseif exists(':NeoCompleteUnlock') == 2
            exe 'NeoCompleteUnlock'
        endif
    endfunction


" vim-easy-align-------------------------------
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)


" Indentlines----------------------------------
    let g:indentLine_enabled = 1
    " let g:indentLine_char = '│'
    let g:indentLine_char = '┊'


" Goyo-----------------------------------------
    let g:hoyo_width = 120


" Limelight------------------------------------
    " Color name (:help cterm-colors) or ANSI code
    let g:limelight_conceal_ctermfg = 'gray'
    let g:limelight_conceal_ctermfg = 240
    " Color name (:help gui-colors) or RGB color
    let g:limelight_conceal_guifg = 'DarkGray'
    let g:limelight_conceal_guifg = '#777777'
    " Default: 0.5
    let g:limelight_default_coefficient = 0.7
    " Number of preceding/following paragraphs to include (default: 0)
    let g:limelight_paragraph_span = 1
    " Beginning/end of paragraph
    "   When there's no empty line between the paragraphs
    "   and each paragraph starts with indentation
    let g:limelight_bop = '^\s'
    let g:limelight_eop = '\ze\n^\s'
    " Highlighting priority (default: 10)
    "   Set it to -1 not to overrule hlsearch
    let g:limelight_priority = -1
    autocmd! User GoyoEnter Limelight
    autocmd! User GoyoLeave Limelight!


" Tagbar---------------------------------------
    nmap <Leader>t :TagbarToggle<CR>
    "autocmd VimEnter * nested :TagbarOpen
    "

" Signature-----------------------------------
    let g:SignatureMarkTextHLDynamic = 1


" deoplete------------------------------------
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_smart_case = 1

    " disable autocomplete by default
    " let b:deoplete_disable_auto_complete=1
    " let g:deoplete_disable_auto_complete=1

    let g:deoplete#sources#jedi#show_docstring = 0
    let g:deoplete#sources#jedi#server_timeout = 100

    call deoplete#custom#source('ultisnips', 'matchers', ['matcher_fuzzy'])
    " Register some default omnicomplete functions/patterns
    " to automatically trigger in deoplete {{
    let g:deoplete#omni#functions = get(g:, 'deoplete#omni#functions', {})
    let g:deoplete#omni#input_patterns = get(g:, 'deoplete#omni#input_patterns', {})

    let g:deoplete#omni#functions.tex = ['vimtex#complete#omnifunc']
    let g:deoplete#omni#input_patterns.tex =
          \ '(?:'
          \ . '\\\w*'
          \ . ')'

    " deoplete-clang
    if filereadable('/usr/lib/llvm-3.8/lib/libclang.so.1')
        let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm-3.8/lib/libclang.so.1'
    elseif filereadable('/Library/Developer/CommandLineTools/usr/lib/libclang.dylib')
        let g:deoplete#sources#clang#libclang_path = '/Library/Developer/CommandLineTools/usr/lib/libclang.dylib'
    endif

    if isdirectory('/usr/include/clang')
        let g:deoplete#sources#clang#clang_header = '/usr/include/clang/'
    elseif isdirectory('/Library/Developer/CommandLineTools/usr/lib/clang/')
        let g:deoplete#sources#clang#clang_header = '/Library/Developer/CommandLineTools/usr/lib/clang/'
    endif


" Ultisnips-----------------------------------
    let g:UltiSnipsExpandTrigger="<c-j>"
    let g:UltiSnipsJumpForwardTrigger="<c-j>"
    let g:UltiSnipsJumpBackwardTrigger="<c-k>"
    " let g:UltiSnipsEditSplit="vertical"


" Supertab-------------------------------------
    " Use 'omnicomplete' as the default completion type.
    " It may fallback to default keyword completion (<C-P>).
    let g:SuperTabDefaultCompletionType = "<C-X><C-O>"

    " sometimes we may want to insert tabs or spaces for indentation.
    " no tab completion at the start of line or after whitespace.
    let g:SuperTabNoCompleteAfter = ['^', '\s']


" echodoc-----------------------------------------
    let g:echodoc#enable_at_startup = 1


" vim-startify------------------------------------
    let g:startify_bookmarks = [
                \ { 'a': '~/dotfiles/nvim/init.vim' },
                \ { 's': '~/dotfiles/zsh/zpreztorc' },
                \ { 'd': '~/dotfiles/zsh/zshrc' },
                \ { 'f': '~/dotfiles/tmux/tmux.conf.local' }
                \]
    let g:startify_change_to_dir = 0


" FZF----------------------------------------------
    nnoremap <leader>F :FZF<CR>
    command! F FZF
    nnoremap <leader>B :Buffers<CR>
    command! B Buffers
    nnoremap <leader>H :History<CR>
    command! H History
    nnoremap <leader>C :Commits<CR>
    command! C Commits

    let g:fzf_colors =
    \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }


" Semshi--------------------------------------------
    function CustomSemshiHighlights()
        hi! def link  semshiBuiltin  Structure
        hi! def link semshiSelf Identifier
        " hi semshiSelf           ctermfg=174     guifg=#d78787
        hi semshiAttribute      ctermfg=121     guifg=#87ffaf
        " hi semshiParameter      ctermfg=103     guifg=#8787af
    endfunction
    autocmd FileType python call CustomSemshiHighlights()


" " pymode-------------------------------------------
"     " heavenshell/vim-pydocstring
"     " Change default keymapping to <C-_> (default is <C-l>)
"     nmap <silent> <C-_> <Plug>(pydocstring)
"
"     " disable code folding by default
"     let g:pymode_folding = 0
"
"     " disable rope (terribly slow), in favor of jedi-vim
"     let g:pymode_rope = 0
"
"     " prefer jedi's <leader>r (rename), instead of run
"     " however, jedi resets all the highlight :( - why?
"     let g:pymode_run = 0
"
"     " Use ipython pdb for inserting breakpoints
"     " one might need to run 'pip install ipdb'
"     let g:pymode_breakpoint_cmd = 'import ipdb; ipdb.set_trace()'
"
"     " lint (code checking):
"     " disable in favor of ALE, but only if pylint/pycodestyle exists
"     let s:py_linters_exists = executable("pylint") || executable("pycodestyle")
"     if has_key(g:plugs, 'ale') && s:py_linters_exists
"         let g:pymode_lint = 0
"     endif
"
"     " Check code on every save (not on the fly)
"     let g:pymode_lint_on_write = 1
"     let g:pymode_lint_unmodified = 1
"
"     " Do NOT open quickfix window when any pymode_lint errors have been found
"     let g:pymode_lint_cwindow = 0
"
"     " Skip some errors and warnings
"     " see also ~/.config/pycodestyle (for ALE)
"     "  E401 : multiple imports on one line
"     "  E501 : line too long
"     let g:pymode_lint_ignore = ["E401", "E501"]
"
"     let g:pymode_syntax_all = 1
"
"
" " jedi----------------------------------------------
"     " For neovim or vim8 (completor.vim),
"     " disable jedi's autocompletion behavior but enable all the other features (e.g. goto, or refactoring)
"     " The autocompletion is supported by deoplete-jedi or completor.vim.
"     if has_key(g:plugs, 'deoplete-jedi') || has_key(g:plugs, 'completor.vim')
"     "if has('nvim') || v:version >= 800
"         " @see https://github.com/zchee/deoplete-jedi/issues/35
"         let g:jedi#completions_enabled = 0
"     endif
"
"     " Make jedi's completeopt not to include 'longest',
"     " to prevent underscore prefix auto-completion (e.g. self.__)
"     " @see jedi-vim issues #429
"     let g:jedi#auto_vim_configuration = 0
"
"     " Do not automatically add the 'import' statement for 'from ...'
"     let g:jedi#smart_auto_mappings = 0
"
"     " Turn off call signatures temporarily, due to an annoying bug
"     " @see https://github.com/davidhalter/jedi-vim/issues/257
"     let g:jedi#show_call_signatures = 0
"
"     " jedi-vim opens buffer in the current tab (rather than a new tab)
"     " when goto (e.g. goto definition) is performed
"     let g:jedi#use_tabs_not_buffers = 0
"
"     " window splits to open with; for now, it is disabled
    "let g:jedi#use_splits_not_buffers = 'bottom'


" vim-pyglot----------------------------------------
    let g:polyglot_disabled = ['css']


" nrrwrgn-------------------------------------------


" vim-markdown--------------------------------------
    let g:vim_markdown_math = 1


" ctrlsf---------------------------------------------
    nmap     <C-F>f <Plug>CtrlSFPrompt
    vmap     <C-F>f <Plug>CtrlSFVwordPath
    vmap     <C-F>F <Plug>CtrlSFVwordExec
    nmap     <C-F>n <Plug>CtrlSFCwordPath
    nmap     <C-F>p <Plug>CtrlSFPwordPath
    nnoremap <C-F>o :CtrlSFOpen<CR>
    nnoremap <C-F>t :CtrlSFToggle<CR>
    inoremap <C-F>t <Esc>:CtrlSFToggle<CR>

" lista----------------------------------------------
    nnoremap # :<C-u>Lista<CR>
    nnoremap g# :<C-u>ListaCursorWord<CR>

" vim-sandwich---------------------------------------
    " if you have not copied default recipes
    let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)

    " add spaces inside braket
    let g:sandwich#recipes += [
          \   {'buns': ['{ ', ' }'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': ['{']},
          \   {'buns': ['[ ', ' ]'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': ['[']},
          \   {'buns': ['( ', ' )'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': ['(']},
          \   {'buns': ['{\s*', '\s*}'],   'nesting': 1, 'regex': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': ['{']},
          \   {'buns': ['\[\s*', '\s*\]'], 'nesting': 1, 'regex': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': ['[']},
          \   {'buns': ['(\s*', '\s*)'],   'nesting': 1, 'regex': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': ['(']},
          \ ]
